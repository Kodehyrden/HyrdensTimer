<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA41Rjk5OTkNNg4AAAAAAAAAAAAAAAAA
        AAAAAAAAAA41NUYDEyBISCFZPkZaAAAAAAAAAAAAAAAAAAAAAABGNEZIGy9JLklPQSsEOUZGAAAAAAAA
        AAAAAAAAAAAAAVQ3WCtRDwJRSVUNDykSJkYBAAAAAAAAAAAAAAAAAD5UIVcHQSlVPRkZHh8NQQVRQgYB
        AAAAAAAAAAAAAAAAVCZWST4eQEI9VR49AgwSAQ9RKQEOAAAAAAAAAAAAAAZUTkkPVB8FBj1VUj1MDx49
        Ag1BHgEAAAAAAAAAAAAAGhMtSQwrBj09PT09GhoaPRISUQ1PHwAAAAAAAAAAAA5LRykCQj8eTEw9PT09
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAECAwQFBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>